# Sort keys
jq --sort-keys

# QUOTING: You don't HAVE to quote things, but you'll have less problems if you always do.
# 1. Surround your expression with single quotes first, so that unix will leave the inside of
# those quotes alone
# 2. Inside the single quotes, put double quotes around names that jq might get fussy with.
#
# This works:
jq .dog.cat
# But this works too:
jq '.dog.cat'
# Don't format strings in double quotes:
jq -r .dog.cat
# Monochrome is -M
jq -M .dog.cat

# PURE pretty printing: You must give a filter or piping to other things (like less)
# well break
jq "."

# If the root node is an array, ask for it like:
.[]
.[1]

# Multi-level drill down:
    # Get everything named bar under things named .foo
    jq '.foo.bar'

    # Get multiple values at the same level
    jq '.first,.second'

    # And this works no matter how funky the names are:
    jq -M '."do-g"."c@at"'

## ARRAYS:
# Get the names of all the dogs in {"dogs": [{name: "spike", ...}, {...}, ...]}
.dogs[].name

# Multiple values from array members
    # Prints them on separate lines - not so great:
    echo '[ {"ts":"ts1", "key": "key1"}, {"ts":"ts2", "key":"key2"} ]' | jq '.[] | .ts,.key'

    # Prints them as space delimited lines using + operator - but this will fail on numbers ha ha
    echo '[ {"ts":"ts1", "key": "key1"}, {"ts":"ts2", "key":"key2"} ]' | jq -r '.[] | .ts +" "+ .key'

    # Okay this actually works:
    echo '[ {"ts":"ts1", "key": "key1"}, {"ts":"ts2", "key":"key2"} ]' | jq -r '.[] | "\(.ts) \(.key)"'

    # Okay this is utterly wicked - transform one array into another:
    echo '[ {"ts":"ts1", "key": "key1", "junk":"balkd"}, {"ts":"ts2", "key":"key2", "junk":"balkdwefw"} ]' \
        | jq -r '[.[] | {ts: .ts, key:.key}]'

# This will get the entire array named Clusters - all elements in the array
jq '.Clusters[]'


# BELOW HERE I DUNNO

# This will get both attributes in the array of stuff under Clusters, but instead
# of pairing them up, it will split them out:
jq '.Clusters[]["MasterUsername","Tags"]'

# OK f that. Amazon makes it easy:
aws redshift describe-clusters --query 'Clusters[*].{user:MasterUsername,tags:Tags}' | less

echo "Use string interpolation: This is pretty good for printing the contents of a log file:"
echo '{"aa":"111", "bb":"222", "cc":"333"}{"aa":"112", "bb":"4349", "cc":"hello"}' | jq -r '"#\(.aa) \(.bb) \(.cc)"'
#111 222 333
#112 4349 hello

echo "Use string interpolation again: For when the log file is actually an array"
echo '[{"aa":"111", "bb":"222", "cc":"333"},{"aa":"112", "bb":"4349", "cc":"hello"}]' | jq '.[]' | jq -r '"#\(.aa) \(.bb) \(.cc)"'
#111 222 333
#112 4349 hello

echo "Crazy thing rotates maps to arrays:"
echo '{"aa":"111", "bb":"222", "cc":"333"}{"aa":"112", "bb":"4349", "cc":"hello"}' |   jq 'to_entries' | jq -r  'map(.value) | @csv'

