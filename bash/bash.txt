# Time a command and get seconds to run it
time <cmd>

# Avoiding ctrl-C in cygwin:
setsid COMMAND &

# Color codes
# This prints something in red:
echo '\e[31 foo'

# Prompt:
## Put this in your .bash_profile so you can choose between setting window title to
## the current directory, vs. setting it to an arbitrary string:
function setTitle() {
    export PS1="\[\e[32m\]\u@\h \[\e[33m\]\w\[\e[0m\]\n$ "
    echo -ne "\e]0;$1\a"
}
function setTitlePath() {
    export PS1="\[\e]0;\w\a\]\n\[\e[32m\]\u@\h \[\e[33m\]\w\[\e[0m\]\n$ "
}
setTitlePath

# Send stdin & stdout to the same file
command &> file

# Export a variable name with a default
export MINE=${MINE:-something}

# Background processing
## Get background process PID for thing you just kicked off:
  pid=$!
## Join background process
  wait $mypid
## Join all background processes you created with &
  wait

# Get name of current file
## This works when you are sourcing a file, i.e. "."'ing it
echo "${BASH_SOURCE[0]}"
## This works for regular scripts
echo $0


# Variable substitution & replace:
${parameter:-defaultValue}	Get default shell variables value
${parameter:=defaultValue}	Set default shell variables value
: ${parameter:="8080"}           "    " ... but more robust than previous (numbers break it) (: is a no-op)
: export ${parameter:="8080"}    "    " ... and the export version
${parameter:?”Error Message”}	Display an error message if parameter is not set
${#var}	Find the length of the string
${var%pattern}	Remove from shortest rear (end) pattern
${var%%pattern}	Remove from longest rear (end) pattern
${var:num1:num2}	Substring
${var#pattern}	Remove from shortest front pattern
${var##pattern}	Remove from longest front pattern
${var/pattern/string}	Find and replace (only replace first occurrence)
${var//pattern/string}	Find and replace all occurrences


# Addition and other math
i=$(($i + 1))

#Read without echo
read -s

#Read an entire file:
mystring=$(cat)


# ****** Arrays: *******

## Push to an array:
declare -a params=()
params+=("qqq")
params+=("rrr")
params+=("sss")

# Declare array, loop through it:
myray=(31 32 33 34 35 36)
for xx in "${myray[@]}"; do
    echo $xx
done

# Call another script or function with array as function/script parameters:
# Array is named "params" here (see above). Note that the quotes are essential when there
# are spaces in the parameters, even though it quotes them one at a time, not
# all in one big pair of quotes.
myscript "${params[@]}"

## Split a line of text into an array:
ps -ef | while read line; do
    arr=(${line})
    echo ${arr[1]} " and " ${arr[2]}
done;

## Declared array:
array=(
    'one'
    'two'
    'three'
)
for x in ${array[@]}
    do
    echo $x
    done

## Associative array/map
declare -A myMap
myMap["foo"]="bar"



# **** If tests: ****

## Regex:
if [[ $1 =~ (5|4|3|2|1|0) ]]; then
    numbers+=("$1")
fi

## Standard file tests and some other things
  [ -a FILE ]	True if FILE exists.
  [ -b FILE ]	True if FILE exists and is a block-special file.
  [ -c FILE ]	True if FILE exists and is a character-special file.
  [ -d FILE ]	True if FILE exists and is a directory.
  [ -e FILE ]	True if FILE exists.
  [ -f FILE ]	True if FILE exists and is a regular file.
  [ -g FILE ]	True if FILE exists and its SGID bit is set.
  [ -h FILE ]	True if FILE exists and is a symbolic link.
  [ -k FILE ]	True if FILE exists and its sticky bit is set.
  [ -p FILE ]	True if FILE exists and is a named pipe (FIFO).
  [ -r FILE ]	True if FILE exists and is readable.
  [ -s FILE ]	True if FILE exists and has a size greater than zero.
  [ -t FD ]	True if file descriptor FD is open and refers to a terminal.
  [ -u FILE ]	True if FILE exists and its SUID (set user ID) bit is set.
  [ -w FILE ]	True if FILE exists and is writable.
  [ -x FILE ]	True if FILE exists and is executable.
  [ -O FILE ]	True if FILE exists and is owned by the effective user ID.
  [ -G FILE ]	True if FILE exists and is owned by the effective group ID.
  [ -L FILE ]	True if FILE exists and is a symbolic link.
  [ -N FILE ]	True if FILE exists and has been modified since it was last read.
  [ -S FILE ]	True if FILE exists and is a socket.
  [ FILE1 -nt FILE2 ]	True if FILE1 has been changed more recently than FILE2, or if FILE1 exists and FILE2 does not.
  [ FILE1 -ot FILE2 ]	True if FILE1 is older than FILE2, or is FILE2 exists and FILE1 does not.
  [ FILE1 -ef FILE2 ]	True if FILE1 and FILE2 refer to the same device and inode numbers.
  [ -o OPTIONNAME ]	True if shell option "OPTIONNAME" is enabled.
  [ -z STRING ]	True of the length if "STRING" is zero.
  [ -n STRING ] or [ STRING ]	True if the length of "STRING" is non-zero.
  [ STRING1 == STRING2 ]	True if the strings are equal. "=" may be used instead of "==" for strict POSIX compliance.
  [ STRING1 != STRING2 ]	True if the strings are not equal.
  [ STRING1 < STRING2 ]	True if "STRING1" sorts before "STRING2" lexicographically in the current locale.
  [ STRING1 > STRING2 ]	True if "STRING1" sorts after "STRING2" lexicographically in the current locale.
  [ ARG1 OP ARG2 ]	"OP" is one of -eq, -ne, -lt, -le, -gt or -ge. These arithmetic binary operators return true if "ARG1" is equal to, not equal to, less than, less than or equal to, greater than, or greater than or equal to "ARG2", respectively. "ARG1" and "ARG2" are integers.


## Create a big string "where"
data=$(cat <<EOF
This $foo a very long string.
It can span multiple lines.
You can $foo special characters like $ and \.
EOF
)
echo "$data"

## Echo without newline
echo -n "Hello? "
read answer