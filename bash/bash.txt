Read without echo
  read -s

Send stdin & stdout to the same file
  command &> file

Export a variable name with a default
  #If you run this over & over, you get
  #the same value repeatedly, because it
  #starts by agreeing to accept the existing value.
  #Then it takes your value otherwise.
  export MINE=${MINE:-something}

Get name of current file
  #This works when you are sourcing a file, i.e. "."'ing it
  echo "${BASH_SOURCE[0]}"
  #This works for regular scripts
  echo $0

# Variable substitution
${parameter:-defaultValue}	Get default shell variables value
${parameter:=defaultValue}	Set default shell variables value
: ${parameter:="8080"}           "    " ... but more robust than previous (numbers break it) (: is a no-op)
: export ${parameter:="8080"}    "    " ... and the export version
${parameter:?”Error Message”}	Display an error message if parameter is not set
${#var}	Find the length of the string
${var%pattern}	Remove from shortest rear (end) pattern
${var%%pattern}	Remove from longest rear (end) pattern
${var:num1:num2}	Substring
${var#pattern}	Remove from shortest front pattern
${var##pattern}	Remove from longest front pattern
${var/pattern/string}	Find and replace (only replace first occurrence)
${var//pattern/string}	Find and replace all occurrences


# Arrays:
  # Split a line of text into an array:
  netstat -nr | (while read line; do
    arr=(${line})
    echo ${arr[1]}}
  done;