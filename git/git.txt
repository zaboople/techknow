https://github.com/blog/2019-how-to-undo-almost-anything-with-git
http://ohshitgit.com/

# Getting logs on something that was deleted
git log --all --full-history -- <deletedthing>

DIFF
# When looking at changes between hashcodes, it's
git diff -r <earlierhash> -r <laterhash>
# Ignore line delimiter changes in git diff
git diff --ignore-cr-at-eol
# DIFF branches:
git diff branch1 branch2
# Also use "w" to page up because page up doesn't work because git sucks
# Diff after you do git add:
git diff HEAD
# Diff against remote (you NEED the slash here)
git diff origin/master
# Diff when you already added
git diff --staged
# Diff output relative paths
git diff --relative
# Diff against X as if you'd merged X first. Useful
# when looking over somebody's crap and they don't keep
# up with master
git diff --merge-base X


# CHECKOUT:
# Checkout a repo:
#Be careful, your umask should at least allow u+rwx, esp. x
git clone git@github.com:civitaslearning/dataplatform.git

# PULL:
# Get up to date with master branch:
git pull origin master

# CREATE A NEW REPO:
git init

# PUSH:
# Push over ssh:
git remote add origin git@github.com:username/Hello-World.git
# Push over http:
git remote add origin https://github.com/username/Hello-World.git
# When you try to push over ssh and it fights you
git remote rm origin
git remote add origin git@github.com:<user>/<repo>.git
# And it my fight you some more
git push --set-upstream origin master
#
# Note: Github says you can push a new repo, but they're lying.
# You have to create the repo on github first, and then push your
# local repo on top of it.

# Github ssh broken as usual:
# When they drop port 22, which tends to not work (because your OS? i dunno) you can try ssh over 443:
ssh://git@ssh.github.com:443/user/repo.git

# Add changes
git add .
git add --all
#The latter version seems to pick up deletes better.


# Commit
git commit -m 'first commit'
# Force a commit so you can bump things like PR builders
git commit -m 'bumping' --allow-empty

# Read commit message from stdin (can also use a file instead of -)
cat myfile | git commit -F -

# WHAT branch am I on?
git branch

# WHAT other branches are there remotely?
git branch -r

# MAKE a branch and switch to it
git checkout -b branchname

# SWITCH to a branch:
git checkout branchname



# PUSH a branch
git push --set-upstream origin branchname
# Well once it knows that, push to master:
git push origin master



# MERGE
# To merge a ***remote*** branch into yours do this. Note how we use
# "origin/" to specify the remote branch:
git merge origin/<branchname>
# Other ways:
git checkout targetbranch
git pull
git merge -m 'Merged sourcebranch into targetbranch' sourcebranch
#... deal with conflicts, which will be individual commits. git add will automatically conclude you've resolved conflict
git push --set-upstream origin targetbranch

# !! DELETE a branch:
git branch -d branchname
# !! DELETE a branch remotely:
git push origin --delete <branch>

# Clean up local copies of branches doesn't work
git remote prune origin
# That doesn't work, maybe try this doesn't work
git fetch --prune
# When that doesn't work (this probably won't work either):
git branch --merged master | grep g 'master$' | xargs git branch -d


# HELP!!!! UNDO!!!!

## Undo commits, merges, when you haven't pushed yet:
## Here we're resetting master back to our remote "origin"
git reset --hard origin/master

## !! UNDO whatever uncommitted crap I left around
git reset --hard HEAD

## Undo not-committed-yet delete
## 1. Git it out of the temp/working/purgatory thing
git reset HEAD <filename>
## 2. Get it from the repo
git checkout -- <filename>

## Undo - rollback to a previous hash and dissapear everything after:
git reset c100f9d07fa43b91c7a35edc2d122231dfec9ea1 --soft

# Abort merge
git merge --abort

# Revert a commit by undoing it with a new commit:
git revert <hash>

# Revert a merge post push:
git revert -m 1 <merge-commit-hash>


# COLORS edit your ~/.gitconfig
[color]
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[color "status"]
  added = yellow
  changed = green
  untracked = cyan


#SSH
#  Get off of https!
    get remote -v
#  Generate your public/private key
#  Upload your public key to github.com, all of it
#  Don't worry about starting ssh-agent. stupid.
#  Verify with
ssh -T git@github.com
 git remote set-url origin git@github.com:zaboople/klonk.git


# SQUASH
# This is for when your stupid coworkers say you have too many commit messages and
# want them to go away. You can make smush the whole shebang into one as follows:
# Make the refreshing new branch:
git checkout master
git checkout -b my-brand-NEW-branch
# Squash the old turdy one into it:
git merge --squash my-ollllddd-branch
git commit -m 'I just squashed my old branch into one commit'
# Push it as usual so you can do a PR
git push --set-upstream origin my-brand-NEW-branch

# SQUASH ALTERNATIVE
# This probably will fail with errors. You give it however many commits (here, 100) to go back
# and pray that it doesn't screw you over. Just change "pick" to "s" in the editor
# (yay, vim) that comes up for each commit you want to squish. After that you'll be given
# a second editor where you can make a new message for everything you're squashing
# together; by default it will contain all the messages.
git rebase --interactive HEAD~100

# Or you can try doing a rebase against
git rebase --interactive jumblything


# What commits will be reported when I do my PR?
git checkout master
git log ..my-branch-name

# Temporarily ignore (sucks, doesn't really work):
# First command to ignore, second stops ignoring.
# File/Directory names are optional in second command; without them, everything
# previously ignored will stop ignoring:
git update-index --assume-unchanged <files>
git update-index --no-assume-unchanged [files]

# STASH
# This is an excellent way to park changes so you can move them onto a different branch:
git stash save
git checkout <branch>
git stash pop


# TAGS
# Make tag
git tag "tagname"
git push origin "tagname"
# List remote tags:
git ls-remote --tags origin
# Delete remote tag
git push --delete origin 'pre-microservice-device-time-series'


# Proxying to git:
#   Add this to your ~/.ssh/config, where 194.etc is the host/port i'm proxying through:
ProxyCommand /usr/bin/nc -X connect -x 194.145.60.1:9400 %h %p