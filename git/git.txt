# CHECKOUT:
# Checkout a repo:
#Be careful, your umask should at least allow u+rwx, esp. x
git clone git@github.com:civitaslearning/dataplatform.git

# PULL:
# Get up to date with master branch:
git pull origin master

# CREATE A NEW REPO:
git init

# PUSH:
# Push over ssh:
git remote add origin git@github.com:username/Hello-World.git
# Push over http:
git remote add origin https://github.com/username/Hello-World.git
# When you try to push over ssh and it fights you
git remote rm origin
git remote add origin git@github.com:<user>/<repo>.git
# And it my fight you some more
git push --set-upstream origin master


# Add changes
git add .
git add --all
#The latter version seems to pick up deletes better.


# Commit
git commit -m 'first commit'


# WHAT branch am I on?
git branch

# WHAT other branches are there remotely?
git branch -r

# MAKE a branch and switch to it
git checkout -b branchname

# SWITCH to a branch:
git checkout branchname

# COMPARE/DIFF branches:
git diff branch1 branch2
# Also use "w" to page up because page up doesn't work because git sucks
# Diff after you do git add:
git diff HEAD
# Diff against remote (you NEED the slash here)
git diff origin/master


# PUSH a branch
git push --set-upstream origin branchname
# Well once it knows that, push to master:
git push origin master



# MERGE
# To merge a ***remote*** branch into yours do this. Note how we use
# "origin/" to specify the remote branch:
git merge origin/<branchname>
# Other ways:
git checkout targetbranch
git pull
git merge -m 'Merged sourcebranch into targetbranch' sourcebranch
#... deal with conflicts, which will be individual commits. git add will automatically conclude you've resolved conflict
git push --set-upstream origin targetbranch

# !! DELETE a branch:
git branch -d branchname
# !! DELETE a branch remotely:
git push origin --delete <branch>

# Clean up local copies of branches doesn't work
git remote prune origin
# That doesn't work, maybe try this doesn't work
git fetch --prune
# When that doesn't work (this probably won't work either):
git branch --merged master | grep g 'master$' | xargs git branch -d

# !! UNDO whatever uncommitted crap I left around
git reset --hard HEAD


# COLORS edit your ~/.gitconfig
[color]
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[color "status"]
  added = yellow
  changed = green
  untracked = cyan


#SSH
#  Get off of https!
    get remote -v
#  Generate your public/private key
#  Upload your public key to github.com, all of it
#  Don't worry about starting ssh-agent. stupid.
#  Verify with
ssh -T git@github.com
 git remote set-url origin git@github.com:zaboople/klonk.git

