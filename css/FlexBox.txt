You can make a container a flexbox container by doing this:

    display: flex;

You can add further container-level designations to control the flow of items after that.

# Container-level CSS designations

## flex-direction

Defines the direction items are placed in the container:

    row: The same as the text direction.
    row-reverse: Opposite to the text direction.
    column: Top to bottom.
    column-reverse: Bottom to top.

## justify-content

    - When flex-direction is column, aligns items **vertically**
    - When flex-direction is row, aligns items **horizontally**

    flex-start: Items align to the left side of the container.
    flex-end: Items align to the right side of the container.
    center: Items align at the center of the container.
    space-between: Items display with equal spacing between them.
    space-around: Items display with equal spacing around them.
    space-evenly: ALMOST like space-around


## align-items

Sets how multiple things are spaced apart from each other.

    - When flex-direction is column, aligns items **horizontally**
    - When flex-direction is row, aligns items **vertically**

    flex-start: Packed at the top of the container.
    flex-end: Packed at the bottom of the container.
    center: Packed at the vertical center of the container.
    space-between: Equal spacing between them.
    space-around: Equal spacing around them.
    stretch: Stretched to fit the container.


## flex-wrap

Only useful when items overflow or at least threaten to.

    no-wrap: Every item is fit to a single line.
    wrap: Items wrap around to additional lines.
    wrap-reverse: Items wrap around to additional lines in reverse.

## flex-flow

Allows you to specify a flex-direction & flex-wrap both at the same time. Example:

    flex-flow: column wrap;

## align-content

This is not used often, but is similar to align-items; it only applies to when there are enough items to overflow into multiple lines. This controls the spacing of those lines. It uses the same settings as align-items.

# CSS designations applied to items *within* a container


## order

Changes the ordering of an element; everything defaults to zero, but you can move an element backwards and forwards by applying a negative or positive number to it.

## align-self

Accepts the same properties as align-items / align-content.
